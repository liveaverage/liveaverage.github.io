<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Live Average</title>
    <link>https://liveaverage.github.io/categories/coding/index.xml</link>
    <description>Recent content in Coding on Live Average</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://liveaverage.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making Cisco Identity Firewall, CDA, and ISE play nice</title>
      <link>https://liveaverage.github.io/features/coding/making-cisco-identity-firewall-and-ise-play-nice/</link>
      <pubDate>Thu, 07 Aug 2014 14:03:32 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/making-cisco-identity-firewall-and-ise-play-nice/</guid>
      <description>&lt;p&gt;As of Cisco CDA Patch 2, identity mappings provided via Cisco ISE are natively supported. This means you can authenticate against ISE, which may in turn authenticate against LDAP or Active Directory, and subsequently notify one or more Cisco CDA servers that a new user-to-IP mapping exists. Cisco accomplishes this exchange of authenticated identities via syslog messages. ISE is configured to forward syslog messages to the CDA server(s), and the CDA server(s) have the sending ISE server(s) configured as a syslog &amp;#8220;client.&amp;#8221;&lt;figure id=&#34;attachment_7493&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignleft&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://liveaverage.com/wp-content/themes/mimbo2.2/images/20140729_IDFW_Identity_Digestion_ISE.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-7493&#34; src=&#34;http://liveaverage.com/wp-content/themes/mimbo2.2/images/20140729_IDFW_Identity_Digestion_ISE-300x232.jpg&#34; alt=&#34;Visio of Cisco IDFW Identity Digestion from ISE&#34; width=&#34;300&#34; height=&#34;232&#34; srcset=&#34;http://liveaverage.com/wp-content/themes/mimbo2.2/images/20140729_IDFW_Identity_Digestion_ISE-300x232.jpg 300w, http://liveaverage.com/wp-content/themes/mimbo2.2/images/20140729_IDFW_Identity_Digestion_ISE.jpg 748w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Cisco IDFW Identity Digestion from ISE via Syslog-NG&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;We didn&amp;#8217;t wait for this native support at our organization since we needed identities consumed by Cisco WLC via ISE to be available before the general release of Patch 2. How&amp;#8217;d we manage this? After successful authentication via ISE, we would forward syslog RADIUS accounting messages to a syslog-ng server. We&amp;#8217;d filter only the messages we needed and pass off the necessary information to a Python app listening for input on stdin. This app digests the information and creates its own RADIUS accounting packet that gets forwarded to an array of CDA and/or AD agent servers. This method works with their legacy AD agent server &lt;em&gt;and&lt;/em&gt; non-Patch 2 CDA appliances.&lt;/p&gt;

&lt;p&gt;Why aren&amp;#8217;t we using the native solution? We recently encountered problems with proper user-to-IP mappings being overwritten by machine-to-IP mappings forwarded from ISE. Since we&amp;#8217;re using ISE for user and machine auth, it does make sense to see user &lt;em&gt;and&lt;/em&gt; machine mappings, but because only one user can be affiliated with any one IP address, the desired user-to-IP mappings occasionally get overwritten with machine names or MAC addresses. We reverted back to our own in-house solution and I&amp;#8217;m posting it here in hopes it will help anyone else experiencing the problem. There are a few requirements to get this working:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forward syslog entries (filtered at your own discretion) from ISE to any syslog/syslog-ng server&lt;/li&gt;
&lt;li&gt;Configure the necessary source, filter, and/or destination on your syslog server. This assumes you&amp;#8217;re already listening for network sources.&lt;/li&gt;
&lt;li&gt;Add your syslog server as a &amp;#8220;Consumer Device&amp;#8221; on all CDA servers&lt;/li&gt;
&lt;li&gt;Install Python &amp;amp; &lt;a title=&#34;PyRad fork with cisco-avpair support&#34; href=&#34;https://github.com/andreynpetrov/pyrad/tree/a9ca1d1fe756a93300638eed144357a4a10f81a3&#34; target=&#34;_blank&#34;&gt;PyRad&lt;/a&gt; on your syslog server&lt;/li&gt;
&lt;li&gt;Configure the Python app, and associated modules, below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install &lt;a href=&#34;https://github.com/andreynpetrov/pyrad/tree/a9ca1d1fe756a93300638eed144357a4a10f81a3&#34; target=&#34;_blank&#34;&gt;PyRad &lt;/a&gt;first. I actually used a fork that had the correct support for cisc0-avpair. Next download the module used by the app being called from syslog-ng:&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-python code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-python code-embed-code&#34;&gt;import random, socket, sys, logging
import pyrad.packet

from pyrad.client import Client
from pyrad.dictionary import Dictionary

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

#Logger Console Handler
ch = logging.StreamHandler() #StreamHandler logs to console
ch.setLevel(logging.DEBUG)
ch_format = logging.Formatter(&amp;#039;%(asctime)s - %(message)s&amp;#039;)
ch.setFormatter(ch_format)
logger.addHandler(ch)

#Logger File Handler
fh = logging.FileHandler(&#34;.\{0}.log&#34;.format(__name__))
fh.setLevel(logging.WARNING)
fh_format = logging.Formatter(&amp;#039;%(asctime)s - %(name)s - %(levelname)-8s - %(message)s&amp;#039;)&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/8944967&#34; title=&#34;See mod_radacct.py&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;mod_radacct.py&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/8944967/raw/b1439ee6e0b31f80f53636c2b9ac784582628d26/mod_radacct.py&#34; title=&#34;Back to mod_radacct.py&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now grab the program listening for syslog-ng $MESSAGE input. I&amp;#8217;ve split the file into a configuration module (mod_cda.py), and the actual program (update_cda.py). Modify to suite your environment:&lt;/p&gt;

&lt;p&gt;mod_cda.py&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-python code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-python code-embed-code&#34;&gt;import mod_radacct

# Dictionary path (can be relative or absolute):
dictionary = &#34;dictionary&#34;

# If missing a user domain in the syslog msg, this is provided:
default_domain = &#34;DefaultDomain&#34;

# List of CDA identity maintainers. Can include legacy AD Agent servers:
servers = [ &#34;cda1&#34;, &#34;cda2&#34;, &#34;ada1&#34;, &#34;ada2&#34; ]

# RADIUS secret:
secret = &#34;yourRadiusSecret&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/22139f9adf9423143cf2&#34; title=&#34;See mod_cda.py&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;mod_cda.py&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/22139f9adf9423143cf2/raw/d6277481b0e3edadc68e16935c49bf49819dd1a6/mod_cda.py&#34; title=&#34;Back to mod_cda.py&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;update_cda.py&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-python code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-python code-embed-code&#34;&gt;#!/usr/bin/env python

import logging, re, sys, time
import mod_cda

PYTHONUNBUFFERED = &#34;true&#34;

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

#Logger Console Handler
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch_format = logging.Formatter(&amp;#039;%(asctime)s - %(message)s&amp;#039;)
ch.setFormatter(ch_format)
logger.addHandler(ch)

#Logger File Handler; change to your desired path
fh = logging.FileHandler(&#34;/usr/local/cda/{0}.log&#34;.format(&#34;UpdateCDA&#34;))
fh.setLevel(logging.DEBUG)&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/ac8a11658e773f46da40&#34; title=&#34;See update_cda.py&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;update_cda.py&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/ac8a11658e773f46da40/raw/e6f524a32105a7aafaa1e05588cb849a2ce3d4dd/update_cda.py&#34; title=&#34;Back to update_cda.py&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;syslog-ng.conf (excerpt)&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;### Filter out ISE hosts that should be sending specific messages for Device/IP association:

filter f_ise_host   {   (
                host(&#34;4.4.4.4&#34;) or
                host(&#34;8.8.8.8&#34;) or
                host(&#34;ise01&#34;) or
                host(&#34;ise02&#34;)
                );
            };

### The username and Framed-IP we&amp;#039;re looking for are in the watchdog updates AFTER accounting &#34;start&#34; msgs:
filter f_ise_auth { match(&#34;.*RADIUS Accounting watchdog update.*&#34; value (&#34;MESSAGE&#34;)); };


destination d_NS_ISE { file(&#34;/var/log/syslog-ng/NS_logs/NS_ISE/$SOURCEIP/$SOURCEIP.log&#34;); };

destination d_NS_pythonCDA  { 
                    program(&#34;/usr/local/cda/update_cda.py&#34;
                    template(&#34;$MSG\n&#34;)
                    flags(no_multi_line)
                    flush_lines(1)
                    flush_timeout(1000)
                    ); 
                };

log {   source(s_network);
    filter(f_ise_host);
    filter(f_ise_auth);
    destination(d_NS_ISE);
    destination(d_NS_pythonCDA);
};&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/50e30d49bb93151f0576&#34; title=&#34;See syslog-ng.conf&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;syslog-ng.conf&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/50e30d49bb93151f0576/raw/5e1df9e248fc1f7952e3b5eb4fdeb588ade0128b/syslog-ng.conf&#34; title=&#34;Back to syslog-ng.conf&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now you should be able to restart syslog-ng and see your application running (ps -ef | grep update_cda). It will continually listen for new messages and process them as needed. Feel free to change any of the configured logging levels to your preferred verbosity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell: Bulk provision DHCP Scopes</title>
      <link>https://liveaverage.github.io/features/coding/powershell-bulk-provision-dhcp-scopes/</link>
      <pubDate>Wed, 30 Jul 2014 21:08:10 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/powershell-bulk-provision-dhcp-scopes/</guid>
      <description>&lt;p&gt;Thought I&amp;#8217;d share a nice wrapper for netsh and dnscmd calls to allow easy, bulk provisioning of new DHCP scopes. It&amp;#8217;s nice being able to provision a ton of these at once by piping the output from Import-CSV!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;############################
#AUTHOR:       JR Morgan
#CREATED:      20120417
#MODIFIED:     20140611
############################

&amp;lt;#
    .Synopsis 
    Adds DHCP Scope to ALL specified DHCP servers. If split-scope is desired
    the script uses IP Math to automatically add the desired exlcude ranges.
    

    .Description 
    Creates a DHCP based on user-provided parameters. For 50/50 split-scope config,
    the ordering of the DHCP Servers determines the upper/lower designation. The first
    DHCP server specified will host upper scope portion, while the second DHCP server will
    host the lower scope portion. Upper/Lower &amp;#039;tags&amp;#039; are added to the description when using
    the Split50 switch.

    .Parameter DhcpServer
        An array of DHCP Server IP names or addresses that will host the new DHCP scopes
        
    .Parameter IPScope
        The desired IP Scope

    .Parameter IPMask
        The desired IP mask for the scope

    .Parameter Description
        A brief scope description. Upper/Lower tags will
        automatically be added if using the Split50 switch
    
    .Parameter Gateway
        The IP address of the router or gateway for this scope (Option 3)
    
    .Parameter Dns
        An array of DNS server IP addresses utilized by scope clients (Option 6).
    
    .Parameter Domain
        The fully-qualified domain name for scope clients (Option 15)&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/f61799a360039990087b&#34; title=&#34;See Set-Dhcp-Scope.ps1&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;Set-Dhcp-Scope.ps1&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/f61799a360039990087b/raw/11e25c9381428702a9fa23fd72a7debfc37b6f41/Set-Dhcp-Scope.ps1&#34; title=&#34;Back to Set-Dhcp-Scope.ps1&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Check_MK: Local Checks Grab Bag!</title>
      <link>https://liveaverage.github.io/features/coding/check_mk-local-checks-grab-bag/</link>
      <pubDate>Tue, 29 Jul 2014 15:32:29 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/check_mk-local-checks-grab-bag/</guid>
      <description>&lt;p&gt;Some local Check_MK checks that were created to execute check_MK local check scripts (Powershell) in 64-bit context, monitor Exchange 2007 health (Storage Group replication status, Log Truncation after backups, etc.), and monitor DNS scavenging on Windows servers:&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;@echo off
REM Note that SysNative is available on x86 2008, and on x86 2003 with KB942589 applied

set CONSOLE_WIDTH=500
CD %ProgramFiles(x86)%\check_mk\local-64
FOR /R %%X IN (&#34;*&#34;) DO ( %WINDIR%\SysNative\windowspowershell\v1.0\powershell.exe -File &#34;%%X&#34;)&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/ff3d31fcc6bde71d8d2f&#34; title=&#34;See Execute-Local-64.bat&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;Execute-Local-64.bat&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/ff3d31fcc6bde71d8d2f/raw/5972e835d811ec92a0378c70bfc9030c72ce9a5f/Execute-Local-64.bat&#34; title=&#34;Back to Execute-Local-64.bat&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;$Host.UI.RawUI.BufferSize = New-Object Management.Automation.Host.Size(900,900)

Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin

$check_name = &#34;Exchange_SG_LogTrunc&#34;

$OK = 0
$Warn = 1
$Crit = 2
$Unk = 3&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/c09b3417e4a7fb1e46aa&#34; title=&#34;See check_Exchange_SG_LogTruncate.ps1&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;check_Exchange_SG_LogTruncate.ps1&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/c09b3417e4a7fb1e46aa/raw/c76fe839cd15931d9a45bfa58fe3dbc651afdce6/check_Exchange_SG_LogTruncate.ps1&#34; title=&#34;Back to check_Exchange_SG_LogTruncate.ps1&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;$Host.UI.RawUI.BufferSize = New-Object Management.Automation.Host.Size(900,900)

Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin



$check_name = &#34;Exchange_SG_CopyStatus&#34;

$OK = 0
$Warn = 1&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/a042417f78e84a6d0259&#34; title=&#34;See check_Exchange_StorageGroups.ps1&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;check_Exchange_StorageGroups.ps1&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/a042417f78e84a6d0259/raw/3f65e665a279a4a5da222c65004d5057c23e94d0/check_Exchange_StorageGroups.ps1&#34; title=&#34;Back to check_Exchange_StorageGroups.ps1&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;$Host.UI.RawUI.BufferSize = New-Object Management.Automation.Host.Size(500,300)

$server = $env:COMPUTERNAME


$global:debug = &#34;&#34;
$global:n_stat = &#34;&#34;
$global:n_stattext = &#34;&#34;

&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/9114265640b97cabc14e&#34; title=&#34;See check_DNS_Scavenge.ps1&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;check_DNS_Scavenge.ps1&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/9114265640b97cabc14e/raw/5ec2e28f338549dae347741103e0841d08dcf6b8/check_DNS_Scavenge.ps1&#34; title=&#34;Back to check_DNS_Scavenge.ps1&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell Script: Sync DHCP Reservations (Windows Server 2008)</title>
      <link>https://liveaverage.github.io/features/coding/powershell-script-sync-dhcp-reservations-windows-server-2008/</link>
      <pubDate>Wed, 14 Nov 2012 14:11:56 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/powershell-script-sync-dhcp-reservations-windows-server-2008/</guid>
      <description>&lt;p&gt;If you have redundant Windows 2008 DHCP servers (likely with split-scope configurations), you&amp;#8217;re familiar with the problem of keeping reservations between the servers synchronized. I figured I&amp;#8217;d post a script I created to sync reservations between servers. Synchronization can be 1-to-1 or 1-to-many, depending on your redundant DHCP server configuration. This script can sync with ALL authorized DHCP servers in a domain if needed. Make sure to read the included Powershell help information. This doesn&amp;#8217;t come with any warranty, but I&amp;#8217;d be glad to answer any questions or consider suggestions for improvement. In my environment, this simply runs as a scheduled task on the secondary DHCP server.&lt;/p&gt;

&lt;p&gt;Something to note: although it *should* work synchronizing to/from Windows Server 2003 servers, I had issues with remote netsh execution (noted in the  script comments below) from W7/2008 systems. I&amp;#8217;ve commented out the offending section that handled 2003 DHCP servers since everyone should, realistically, be running a newer server OS. If there&amp;#8217;s a major need to have 2003 DHCP reservation synchronization, ask and I might be able to spend some more time on the problem. I&amp;#8217;ve since migrated from 2003 to 2008, so there wasn&amp;#8217;t a need to handle these situations.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Sync-Dhcp-Reservations.ps1&#34; href=&#34;https://gist.github.com/liveaverage/522aabcb2593854b70fd&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://gist.github.com/liveaverage/522aabcb2593854b70fd&#34;&gt;https://gist.github.com/liveaverage/522aabcb2593854b70fd&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;&amp;lt;#
.Synopsis
Synchronizes DHCP reservations to all or select authorized DHCP servers in a given domain.

.Description
This script utilizes a user-specified source (master) DHCP server and synchronizes
all or some scope reservations between other, authorized DHCP servers for a given domain.
Netsh commands can be generated for manual execution or executed automatically.

.Parameter Source
The source, authorized DHCP server providing the most current scope reservations.

.Parameter SyncAll
Perform synchronization with all authorized domain DHCP servers

.Parameter SyncSelect
Perform synchronization with user-specified authorized domain DHCP servers. Requires destinations.

.Parameter Destination
The destination, authorized DHCP servers where source reservations will configured.
Use &amp;#039;All&amp;#039; switch to synchronize to all authorized DHCP servers in a given domain.

.Parameter Scoperanges
A comma separated list of scoperanges to include in synchronization. Used with -scope switch.
.Parameter Domain
The fully-qualified domain name for the domain hosting destination
DHCP servers (authorized).

.Parameter Domain
Specifies the domain; useful for multi-domain forests. Uses -match (regex)

.Parameter Purge
Purge reservations on all/destination DHCP servers that were removed from the source.

.Parameter Invoke
Invoke the netsh commands directly from this script. By default, this script will only
generate the required netsh commadns.

.Notes
Created by JR Morgan, 20120409

.Example
-------------------------- EXAMPLE 1 --------------------------

Sync-Dhcp-Reservations -Source WinSource.DhcpServername.ms.com -SyncAll -Domain ms.com -Invoke N

Description
-----------
This command generates commands (no invocation) to synchronize reservations between WinSource and WinDest DHCP servers.

-------------------------- EXAMPLE 2 --------------------------

Sync-Dhcp-Reservations -Source WinSource.DhcpServername.ms.com -Destination Server1,Server2,Server3 -Domain ms.com -Invoke N

Description
-----------
This command generates commands (no invocation) to synchronize reservations between WinSource and an array of destination
DHCP servers. There&amp;#039;s no limit to destination servers. This is useful if you do not want to synchronize a source to ALL
authorized DHCP servers for a given domain.

-------------------------- EXAMPLE 3 --------------------------

Sync-Dhcp-Reservations -Source WinSource.DhcpServername.ms.com -SyncAll -Domain ms.com -Scope-Invoke Y

#&amp;gt;

Param
(
[Parameter(
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
Mandatory = $True,
HelpMessage=&#34;Specify a source DHCP to query for reservations&#34;)]
[Alias(&#34;s&#34;)]
[String]
$Source
,
[Parameter(
ParameterSetName = &#34;DhcpAll&#34;,
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
HelpMessage=&#34;Syncs with all authorized DHCP servers.&#34;)]
[switch]
$SyncAll
,
[Parameter(
ParameterSetName = &#34;DhcpDest&#34;,
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
Mandatory = $True,
HelpMessage=&#34;Specify one or more destination DHCP server(s)&#34;)]
[Alias(&#34;d&#34;)]
[String[]]
$SyncSelect
,
[Parameter(
#ParameterSetName = &#34;ScopeIncludes&#34;,
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
Mandatory = $False,
HelpMessage=&#34;Enter one or more scopes to be syncronized from source to destination server(s).&#34;)]
[ValidatePattern(&amp;#039;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&amp;#039;)]
[Alias(&#34;c&#34;)]
[String[]]
$Scoperanges
,
[Parameter(
#ParameterSetName = &#34;ScopeExcludes&#34;,
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
Mandatory = $False,
HelpMessage=&#34;Enter one or more scopes to be excluded from synchronization.&#34;)]
#[ValidatePattern(&amp;#039;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&amp;#039;)]
[Alias(&#34;x&#34;)]
[String[]]
$ExcludedScopes
,
[Parameter(
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
Mandatory = $True,
HelpMessage=&#34;Specify the domain hosting authorized DHCP servers you&amp;#039;d like sync&#34;)]
[Alias(&#34;m&#34;)]
[String]
$Domain
,
[Parameter(
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
HelpMessage=&#34;Specify whether reservations deleted on the source should be removed from destination server(s).&#34;)]
[Alias(&#34;p&#34;)]
[Switch]
$Purge
,
[Parameter(
ValueFromPipeline = $True,
ValueFromPipelineByPropertyName = $True,
HelpMessage=&#34;Specify whether the netsh commands should be invoked or only displayed&#34;)]
[Alias(&#34;i&#34;)]
[Switch]
$Invoke
,
[Parameter(
ValueFromPipelineByPropertyName = $True,
HelpMessage=&#34;Specify log file path (optional)&#34;)]
[Alias(&#34;l&#34;)]
[string]
$LogPath=&#34;$env:temp\Sync-Dhcp-Reservations-Log.txt&#34;
)

function Get-Dhcp-Servers()
{

$dhcps = netsh dhcp show server
$dhcps = $dhcps | ?{ $_ -match $Domain} | %{ $a = $_.Split(&#34; &#34;); $b = $a[1].replace(&#34;[&#34;,&#34;&#34;); $b = $b.replace(&#34;]&#34;,&#34;&#34;); $b}

return $dhcps
}

function Get-Dump ($server)
{

$header= @(&#34;proto&#34;,&#34;server&#34;,&#34;sip&#34;,&#34;scope&#34;,&#34;scoperange&#34;,&#34;action&#34;,&#34;opt&#34;,&#34;ip&#34;,&#34;mac&#34;,&#34;name&#34;,&#34;description&#34;,&#34;opt2&#34;)
$dhcpConfigs = @()

#Backup each server config before proceeding:
#Invoke-Expression &#34;netsh dhcp server \\$server dump &amp;gt; $server-$(Get-Date -uformat &#34;%d&#34;).dhcp&#34;

#$dump = &#34;$server-$(Get-Date -uformat &#34;%d&#34;).dhcp&#34;

#   $v = Get-WmiObject -ComputerName $server -Authentication PacketPrivacy -Impersonation Impersonate Win32_OperatingSystem

#There&amp;#039;s a problem with remote netsh execution from W7/2008/newer to 2003/XP DHCP.
#Solved with a call to PsExec, but this condition is tested, then the presence of PsExec
#is tested.

$dump = Invoke-Expression &#34;netsh dhcp server \\$server dump&#34;

#    if ($v.version -gt 6)
#    {
#        $dump = Invoke-Expression &#34;netsh dhcp server \\$server dump&#34;
#    }
#    elseif (($v.version -lt 6) -and (Test-Path &#34;PsExec.exe&#34;))
#    {
#
#        $dump = Invoke-Expression &#34;./PsExec.exe \\$server netsh dhcp server \\$server dump&#34;
#        Start-Sleep -Seconds 20
#    }
#    else
#    {
#        throw &#34;Problem determining destination DHCP server version for netsh command execution.`r`nYou may be missing PsExec.exe from the script directory.&#34;
#    }

$raw = $dump | Where {($_ -notmatch &#34;#&#34;) -and ($_ -match &#34;reservedip&#34;)} |
ForEach-Object { $_ }

if ($raw -ne $null)
{
#Import the content into a CSV array object:
$csvdump = $raw | ConvertFrom-Csv -Header $header -delimiter &#34; &#34;
}
else
{
throw &#34;Problem retrieving configuration from $server.`r`nYou may not have appropriate permissions or you may be querying an older server version.&#34;
}

return $csvdump

}

function Compare-Dump ($sourcedump, $destdump)
{

Compare-Object -ReferenceObject $sourcedump -DifferenceObject $destdump -Property scoperange,action,opt,ip,mac -PassThru |
#?{ ($_.name -notmatch &#34;unused&#34;)} |
Select -Property sip,name,scoperange,action,opt,ip,mac,@{Name=&#34;Configured on&#34;;Expression={if ($_.SideIndicator -eq &#34;=&amp;gt;&#34;){ &#34;Destination&#34; } elseif ($_.SideIndicator -eq &#34;&amp;lt;=&#34;){ $source }}},description

}

function Set-ClearVars()
{
Remove-Variable [a..z]* -Scope Global
Remove-Variable [1..9]* -Scope Global
}

function Get-Destination-Sys()
{

$d = Get-Dhcp-Servers | ?{ ($_ -notmatch $source) -and ($_ -notmatch &#34;gruprintpr01&#34;)}

if ($SyncAll)
{
return $d
}
elseif (($SyncSelect).count -ge 1)
{
foreach ($sys in $SyncSelect)
{
$dr += $d | ?{ $_ -match $sys }
}

return $dr
}
}

############## Main Block #####################

#Get source reservation config; this will be used frequently:
$sd = Get-Dump $source
$log = $null
$sourceIp = (Test-Connection -Count 1 $source).IPV4Address.IPAddressToString

#Debug:

$start = $(Get-Date -uformat &#34;%Y%m%d%H%M%S&#34;)

$log += &#34;(DEBUG) $start`r`n&#34;
$log += &#34;(DEBUG) User-provided source DHCP server:`t`t`t$source`r`n&#34;
$log += &#34;(DEBUG) User-provided domain name for DHCP sync:`t`t$Domain`r`n&#34;
$log += &#34;(DEBUG) User-provided SyncSelect server count:`t`t`t$(($SyncSelect).count)`r`n&#34;
$log += &#34;(DEBUG) User-provided SyncSelect server(s):`t`t`t$SyncSelect`r`n&#34;
$log += &#34;(DEBUG) Listing of all Dhcp-Servers detected for:`t`t$(Get-Dhcp-Servers)`r`n&#34;
$log += &#34;(DEBUG) Listing of desination server:`t`t`t`t$(Get-Destination-Sys)`r`n&#34;

foreach ($s in Get-Destination-Sys)
{
Set-ClearVars
$nsh_dis = @()
$nsh_add = @()
$c = $null
$cr = $null
$xs = $null

#Get destination server IP (for comparisons):
$destIp = (Test-Connection -Count 1 $s).IPV4Address.IPAddressToString

$log += &#34;`r`n`r`n(DEBUG) ######## Syncing $s ######################################`r`n`r`n&#34;

#Output for this should be null or empty if dhcp is synchronized:

$c = Compare-Dump $sd (Get-Dump $s)

#$log += &#34;(DEBUG) Initial dump comparision for $source and $($s):`r`n&#34;
$c | ft -auto

#Parse the dump info to include only relevant scopes:

if (($Scoperanges).count -ge 1)
{
$log += &#34;(DEBUG) User-provided Scoperange count:`t`t`t`t$($Scoperanges.count)&#34;
$log += &#34;(DEBUG) User-provided Scopes to be synchronized:`t`t$Scoperanges&#34;

foreach ($sc in $Scoperanges)
{
#Remove discrepancies for unspecified scoperanges (on source and dest servers):
$log += &#34;(DEBUG) Filtering diff set by user-provided scope $sc&#34;
$cr += $c | ?{$_.scoperange -eq $sc}
}

$log += &#34;(DEBUG) Revised Scoperange-specific diffs:`r`n&#34;
$cr | ft -auto
$c = $cr

$log += &#34;(DEBUG) Diffs after reassignment to initial dump comp array:`r`n&#34;
$c | ft -auto
$log += &#34;(DEBUG) Count of diffs after scoperange specifics:`t`t`t$($c.count)`r`n&#34;
}

if (($ExcludedScopes).count -ge 1)
{
foreach ($xs in $ExcludedScopes)
{
#Remove discrepancies for excluded scoperanges (on source and dest servers):
$log += &#34;(DEBUG) Filtering diff set by user-provided excluded scope $xs&#34;
&#34;Removing $($c | ?{$_.scoperange -notmatch $xs})&#34;
$c = $c | ?{$_.scoperange -notmatch $xs}
}

#$log += &#34;(DEBUG) Revised Scoperange-exclusion diffs:`r`n&#34;
#$cr | ft -auto
#$c = $cr

$log += &#34;(DEBUG) Diffs after reassignment to initial dump comp array:`r`n&#34;
$c | ft -auto
$log += &#34;(DEBUG) Count of diffs after scoperange specifics:`t`t`t$($c.count)`r`n&#34;
}

#Handle discrepancies for reservations that require removal/addition from destination servers:

foreach ($r in $c)
{
#If the serverIP/name matches the destination server, that means the records no longer exists or has changed on the
#source server; removed these reservations since we&amp;#039;re syncing from a SINGLE master DHCP sys:
if (($r.sip -match $s) -or ($r.sip -eq $destIp))
{
$nsh_dis += &#34;netsh dhcp server \\$s scope $($r.scoperange) delete reservedip $($r.ip) $($r.mac)`r`n&#34;
}

#If the serverIP/name matches the source server (master), that means it&amp;#039;s missing on the destination server;
#add these reservations since we&amp;#039;re syncing to destination servers FROM the master.
if (($r.sip -match $source) -or ($r.sip -eq $sourceIP))
{
#$desc = ($r.mac + &#34; &#34; + (Convert-DNStoCN $Name))
$nsh_add += &#34;netsh dhcp server \\$s scope $($r.scoperange) add reservedip $($r.ip) $($r.mac) `&#34;$($r.name)`&#34; `&#34;$($r.description)`&#34; BOTH`r`n&#34;
}
}
$log += &#34;`r`n(DEBUG) Reservations being removed from destination $s :`r`n&#34;
$log += $nsh_dis
$nsh_dis | Out-File &#34;netsh_cmd_dis_res.txt&#34;
$log += &#34;`r`n(DEBUG) Reservations being added to destination $s :`r`n&#34;
$log += $nsh_add
$nsh_add | Out-File &#34;netsh_cmd_add_res.txt&#34;

if ($Invoke)
{
$log += &#34;`r`n(DEBUG) Received Invoke Switch; Executing reservation operations on $s :`r`n&#34;
foreach ($cm in $nsh_dis)
{
Invoke-Expression $cm -ErrorVariable err
}
foreach ($ca in $nsh_add)
{
Invoke-Expression $ca -ErrorVariable err
}

if ($err.count -ge 1)
{
$log += &#34;Errors: `r`n$err `r`n&#34;
}
else
{
$log += &#34;No errors encountered; moving on`r`n&#34;
}
$log += &#34;`r`n(DEBUG) Finished invoking/syncing reservations to $s :`r`n&#34;
}

#Set-ClearVars
#$nsh_add = $null
#$nsh_dis = $null

#Remove-Variable $nsh_add
#Remove-Variable $nsh_dis
$end = $(Get-Date -uformat &#34;%Y%m%d%H%M%S&#34;)

$log += &#34;`r`n`r`n(DEBUG) ######## $end - End of sync for $s ######################################`r`n`r`n&#34;
}

Out-File -Encoding ASCII -InputObject $log -FilePath &#34;dhcpSync.log&#34; -Append
$log&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/522aabcb2593854b70fd&#34; title=&#34;See Sync-Dhcp-Reservations.ps1&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;Sync-Dhcp-Reservations.ps1&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/522aabcb2593854b70fd/raw/1db0569e101ae3d6e8dc30205649073cbdf0d88e/Sync-Dhcp-Reservations.ps1&#34; title=&#34;Back to Sync-Dhcp-Reservations.ps1&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Powershell Script: Windows Event Log Retention and Compression</title>
      <link>https://liveaverage.github.io/features/coding/powershell-script-windows-event-log-retention-and-compression/</link>
      <pubDate>Wed, 07 Nov 2012 22:12:34 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/powershell-script-windows-event-log-retention-and-compression/</guid>
      <description>&lt;p&gt;Windows Security event logs fill up fast when you have Directory Service Access Auditing enabled, for &lt;a title=&#34;Tracking DNS Deletions&#34; href=&#34;http://blogs.technet.com/b/networking/archive/2011/08/17/tracking-dns-record-deletion.aspx&#34; target=&#34;_blank&#34;&gt;whatever reason&lt;/a&gt;. If I want to retain any useful information, I need at least 7 to 14 days of logs to review, in my case, the DNS scavenging process. The built-in &amp;#8216;Archive log when full&amp;#8217; option doesn&amp;#8217;t really help out as much as you&amp;#8217;d think, particularly when I might have 2 or 3 logs (each 300MB) per day. I poked around Windows Server 2008 looking for options to increase the quantity of archive logs, but I couldn&amp;#8217;t find any applicable settings to change. Even if I did find something, how many 300MB logs can I afford to keep around?&lt;/p&gt;

&lt;p&gt;I opted for a retention script to compress and managed 30 days worth of logs (not just 30 logs, 30 days worth). This uses native compression (no extension or third-party utilities/binaries required). After compression, my log sizes drop from ~300MB to 29-30MB.  This roughly equates to 90MB per day, assuming 3x300MB raw archive logs are used.&lt;/p&gt;

&lt;p&gt;See the included script below. The parameters are well documented, but if there are any questions, just let me know:&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;############################&lt;/p&gt;

&lt;p&gt;#AUTHOR: JR&lt;/p&gt;

&lt;p&gt;#CREATED: 20121106&lt;/p&gt;

&lt;p&gt;#MODIFIED: 20121106&lt;/p&gt;

&lt;p&gt;############################&lt;/p&gt;

&lt;p&gt;####################################################################################&lt;/p&gt;

&lt;p&gt;#.Synopsis&lt;/p&gt;

&lt;p&gt;# Moves archive log files from $logDir to new subdirectory for storage.&lt;/p&gt;

&lt;p&gt;# Removes expired log data or backups sets from $logDir according to retention schedule (below).&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#.Description&lt;/p&gt;

&lt;p&gt;# Checks the user-specified $logDir parameter for log archives&lt;/p&gt;

&lt;p&gt;# and removes stale or expired backup/export sets. Default retention is 14 days if not specified.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#.Parameter $logDir&lt;/p&gt;

&lt;p&gt;# This directory specifies the location of log files.&lt;/p&gt;

&lt;p&gt;# Using this location, the script traverses each subdirectory and determines whether the&lt;/p&gt;

&lt;p&gt;# backup has expired and requires deletion.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#.Parameter $logname&lt;/p&gt;

&lt;p&gt;# This is the name of the Windows log you&amp;#8217;d like to archive and retain (e.g. Security, System, Application, DNS Server, etc.)&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;#.Parameter $retention&lt;/p&gt;

&lt;p&gt;# This is how long to keep log files in the sub-directory.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;####################################################################################&lt;/p&gt;

&lt;p&gt;Param&lt;/p&gt;

&lt;p&gt;(&lt;/p&gt;

&lt;p&gt;[Parameter(ValueFromPipeline = $True, Mandatory = $True)]&lt;/p&gt;

&lt;p&gt;[String]&lt;/p&gt;

&lt;p&gt;[Alias(&amp;ldquo;ld&amp;rdquo;)]&lt;/p&gt;

&lt;p&gt;$logDir = &amp;ldquo;C:\Windows\System32\winevt\Logs&amp;rdquo;&lt;/p&gt;

&lt;p&gt;,&lt;/p&gt;

&lt;p&gt;[Parameter(ValueFromPipeline = $True, Mandatory = $True)]&lt;/p&gt;

&lt;p&gt;[Alias(&amp;ldquo;n&amp;rdquo;)]&lt;/p&gt;

&lt;p&gt;[String]&lt;/p&gt;

&lt;p&gt;$logname = &amp;ldquo;Security&amp;rdquo;&lt;/p&gt;

&lt;p&gt;,&lt;/p&gt;

&lt;p&gt;[Parameter(ValueFromPipeline = $True, Mandatory = $False)]&lt;/p&gt;

&lt;p&gt;[Alias(&amp;ldquo;pw&amp;rdquo;)]&lt;/p&gt;

&lt;p&gt;[Int]&lt;/p&gt;

&lt;p&gt;$retention = 14&lt;/p&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;function New-Zip&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;param([string]$zipfilename)&lt;/p&gt;

&lt;p&gt;set-content $zipfilename (&amp;ldquo;PK&amp;rdquo; + [char]5 + [char]6 + (&amp;ldquo;$([char]0)&amp;rdquo; * 18))&lt;/p&gt;

&lt;p&gt;(dir $zipfilename).IsReadOnly = $false&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function Add-Zip&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;param([string]$zipfilename,$filetozip)&lt;/p&gt;

&lt;p&gt;if(-not (test-path($zipfilename)))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;set-content $zipfilename (&amp;ldquo;PK&amp;rdquo; + [char]5 + [char]6 + (&amp;ldquo;$([char]0)&amp;rdquo; * 18))&lt;/p&gt;

&lt;p&gt;(dir $zipfilename).IsReadOnly = $false&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$shellApplication = new-object -com shell.application&lt;/p&gt;

&lt;p&gt;$zipPackage = $shellApplication.NameSpace($zipfilename)&lt;/p&gt;

&lt;p&gt;$zipPackage.CopyHere($filetozip)&lt;/p&gt;

&lt;p&gt;Start-sleep -milliseconds 500&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function IsFileLocked(&lt;/p&gt;

&lt;p&gt;[string] $path)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;[bool] $isFileLocked = $true&lt;/p&gt;

&lt;p&gt;$file = $null&lt;/p&gt;

&lt;p&gt;Try&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;$file = [IO.File]::Open(&lt;/p&gt;

&lt;p&gt;$path,&lt;/p&gt;

&lt;p&gt;$isFileLocked = $false&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Catch [IO.IOException]&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;If ($_.Exception.Message.EndsWith(&lt;/p&gt;

&lt;p&gt;&amp;ldquo;it is being used by another process.&amp;rdquo;) -eq $false)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Throw $_.Exception&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Finally&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;If ($file -ne $null)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;$file.Close()&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;return $isFileLocked&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$archiveDir = &amp;ldquo;$logDir\Archive-$logname&amp;rdquo;&lt;/p&gt;

&lt;p&gt;# Verify $logDir has a valid path/value:&lt;/p&gt;

&lt;p&gt;if ( ($logDir -eq $null) -or (-not(Test-Path $logDir)))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Write-Output &amp;ldquo;Missing or invalid parameter. Verify the parameter supplied contains a valid path.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;exit 3&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;else&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;if (-not(Test-Path $archiveDir))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;New-Item -Path $logDir -Name &amp;ldquo;Archive-$logname&amp;rdquo; -ItemType &amp;ldquo;Directory&amp;rdquo;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Out-File -filepath &amp;ldquo;$archiveDir\maint.txt&amp;rdquo; -InputObject $(Write-Output ((Get-Date -format g) + &amp;ldquo;`tStarting archiving data retention check.&amp;ldquo;)) -Append;&lt;/p&gt;

&lt;p&gt;$list = Get-ChildItem &amp;ldquo;$logDir&amp;rdquo; | ?{ $_.Name -like &amp;ldquo;Archive-$logname*&amp;rdquo; -and $_.Mode -notmatch &amp;ldquo;d&amp;rdquo; }&lt;/p&gt;

&lt;p&gt;$list&lt;/p&gt;

&lt;p&gt;foreach ($i in $list)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;if (-not(Test-Path &amp;ldquo;$archiveDir\$($i.Name).zip&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;$i.Name&lt;/p&gt;

&lt;p&gt;Out-File -filepath &amp;ldquo;$archiveDir\maint.txt&amp;rdquo; -InputObject $((Write-Output ((Get-Date -format g) + &amp;ldquo;`tCompressing &amp;ldquo; + $_.Name + &amp;ldquo; to $archiveDir (ZIP). Last modified: &amp;ldquo; + $_.CreationTime))) -Append;&lt;/p&gt;

&lt;p&gt;New-Zip &amp;ldquo;$archiveDir\$($i.Name).zip&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;$zipname = ((Get-Item &amp;ldquo;$archiveDir\$($i.Name).zip&amp;rdquo;).FullName);&lt;/p&gt;

&lt;p&gt;$fil = $i.FullName;&lt;/p&gt;

&lt;p&gt;Add-Zip $zipname $fil;&lt;/p&gt;

&lt;p&gt;#Wait for file zip before moving on:&lt;/p&gt;

&lt;p&gt;While (IsFileLocked $zipname)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;Start-sleep -milliseconds 1000;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;#Reset timestamps to those matching the original archive logs; this is important for retention periods:&lt;/p&gt;

&lt;p&gt;$zip = Get-Item &amp;ldquo;$archiveDir\$($i.Name).zip&amp;rdquo;&lt;/p&gt;

&lt;p&gt;$zip.LastWriteTime = $i.LastWriteTime&lt;/p&gt;

&lt;p&gt;$zip.CreationTime = $i.CreationTime&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;# Handle retention based on preferred retention schedule.&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;Get-ChildItem &amp;ldquo;$archiveDir*&amp;rdquo; -Include *.zip | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Where-Object { ( $_.CreationTime -lt ((Get-Date).AddDays(-($retention))) ) } | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;ForEach-Object {`&lt;/p&gt;

&lt;p&gt;Out-File -filepath &amp;ldquo;$archiveDir\maint.txt&amp;rdquo; -InputObject $((Write-Output ((Get-Date -format g) + &amp;ldquo;`tRemoving &amp;ldquo; + $_.FullName + &amp;ldquo; from &amp;rdquo; + $_.CreationTime))) -Append;`&lt;/p&gt;

&lt;p&gt;Remove-Item $_.FullName }&lt;/p&gt;

&lt;p&gt;Out-File -filepath &amp;ldquo;$archiveDir\maint.txt&amp;rdquo; -InputObject $(Write-Output ((Get-Date -format g) + &amp;ldquo;`tDone.&amp;ldquo;)) -Append;&lt;/p&gt;

&lt;p&gt;exit 0&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nagios Plugin: Windows Server DHCP Scopes Usage Monitoring</title>
      <link>https://liveaverage.github.io/news/nagios-plugin-windows-server-dhcp-scopes-usage-monitoring/</link>
      <pubDate>Fri, 13 Apr 2012 16:03:59 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/news/nagios-plugin-windows-server-dhcp-scopes-usage-monitoring/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve stumbled on a &lt;a title=&#34;Link to original check_dhcp_pool plug-in from Lars Michelsen&#34; href=&#34;http://nagios.larsmichelsen.com/check_dhcp_pool/&#34; target=&#34;_blank&#34;&gt;useful plug-in from Lars Michelsen&lt;/a&gt; that easily monitors a single Windows Server DHCP scope for usage using SNMPv2, but found this fell short of what I needed for monitoring several scopes at once. I&amp;#8217;ve modified Lars&amp;#8217; original plugin/script to accommodate all available DHCP scopes on your monitored Windows server. You no longer need to add separate service definitions to monitor all available scopes. It&amp;#8217;s worth noting a couple of important details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nagios 3.x or above is &lt;strong&gt;required&lt;/strong&gt; for the multi-line output generated by this command.&lt;/li&gt;
&lt;li&gt;This service check will alarm if &lt;strong&gt;any&lt;/strong&gt; scope is nearing the critical or warning threshold(s) specified command call.

&lt;ul&gt;
&lt;li&gt;If you require per-scope or per-pool alarm configuration, you should use the original plugin created by Lars Michelsen.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Performance Data has been commented out, but is available if you&amp;#8217;d like to add it.&lt;/li&gt;
&lt;li&gt;Scopes that exist but are not in use (e.g. scopes exclusively used for reservations) are left out of this check. There is a conditional statement commented below that can report these scopes as being available, but with zero (0) free or used addresses, equaling zero (0) MAX available amount of addresses. This information isn&amp;#8217;t really relevant, so I omitted it from being returned; however,  there is a count returned of configured and shown scopes (located at the bottom).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to use, reuse, or modify the script the suit your needs. There are other, similar plugins to accomplish the same thing, but most of these rely on NRPE, NSClient++, and netsh. If you&amp;#8217;re looking for a straight SNMP check to monitor comprehensive DHCP scope usage then this is it.&lt;/p&gt;

&lt;div class=&#34;code-embed-wrapper&#34;&gt;
  &lt;pre class=&#34;language-bash code-embed-pre line-numbers&#34; &gt;&lt;code class=&#34;language-bash code-embed-code&#34;&gt;#! /bin/bash
# ##############################################################################
# check_dhcp_all_pools.sh - Nagios plugin
#
# This script querys a MS Windows DHCP-Server via SNMP v2 to fetch informations about the given DHCP-Pool.
#
# Copyright (C) 2006, 2007 Lars Michelsen &amp;lt;lars@vertical-visions.de&amp;gt;,
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
#
# GNU General Public License: http://www.gnu.org/licenses/gpl-2.0.txt
#
# Report bugs to: lars@vertical-visions.de
#
# 2006-07-05 Version 0.2
# 2007-10-27 Version 0.3
#
# Modified 2013-04-22 by JRM (http://liveaverage.com) to support checking all scopes
# 
#
# ##############################################################################

if [ $# -lt 2 ]; then
        echo &#34;check_dhcp_all_pools&#34;
        echo &#34;Usage: $0 &amp;lt;host&amp;gt; &amp;lt;community&amp;gt; &amp;lt;warn&amp;gt; &amp;lt;crit&amp;gt;&#34;
        echo &#34;Example: WARN at 50 &amp; CRIT at 30 will WARN you when the percentage of free DHCP addresses&#34;
        echo &#34;is less than or equal to 50% of available addresses and alarm CRITICAL whe the percentage&#34;
        echo &#34;of free addresses is less than or equal to 30% of available addresses.&#34;
        exit 3
fi

IP=&#34;$1&#34;
COMMUNITY=&#34;$2&#34;
WARN=&#34;$3&#34;
CRIT=&#34;$4&#34;
RET=0
RETW=0
RETC=0&lt;/code&gt;&lt;/pre&gt;
  
  &lt;div class=&#34;code-embed-infos&#34;&gt;
    &lt;a href=&#34;https://gist.github.com/82016e5ca00aac2109ac&#34; title=&#34;See check_dhcp_all_pools.sh&#34; target=&#34;_blank&#34; class=&#34;code-embed-name&#34;&gt;check_dhcp_all_pools.sh&lt;/a&gt; &lt;a href=&#34;https://gist.githubusercontent.com/liveaverage/82016e5ca00aac2109ac/raw/a1e5a84c8a0ffacf1cf81057a90c071d9a85aa68/check_dhcp_all_pools.sh&#34; title=&#34;Back to check_dhcp_all_pools.sh&#34; class=&#34;code-embed-raw&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Managing backup retention… with one line of Powershell</title>
      <link>https://liveaverage.github.io/features/coding/managing-backup-retention-with-one-line-of-powershell/</link>
      <pubDate>Wed, 30 Nov 2011 18:09:08 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/managing-backup-retention-with-one-line-of-powershell/</guid>
      <description>&lt;p&gt;Ok, I used four lines, but my needs for retention might be a bit more complex than most. I also spaced each pipeline command, so it looks longer than it should, but readability is important. Additionally, there&amp;#8217;s a good half-page of comments in the script than can safely be ignored, unless you &lt;em&gt;want&lt;/em&gt; to know what was going through my mind. Most of these related directly to my desired retention periods.&lt;/p&gt;

&lt;p&gt;For testing purposes, the last two &amp;#8220;lines&amp;#8221; only print out the listing of files that would be deleted.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;Param ($backupDir)&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;# Handle 30-day backup recyclables first (no directory recursion since each backup is in its own directory)&lt;/p&gt;

&lt;p&gt;# The current backup schedule performs weekly configuration backups with 1-month retention.&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;Get-ChildItem &amp;ldquo;$backupDir\backup_data&amp;rdquo; | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Where-Object {(($_.FullName -match &amp;ldquo;configuration_isxpr01_&amp;rdquo;) -and ( $_.CreationTime -lt ((Get-Date).AddMonths(-1)) ) )} | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;ForEach-Object {`&lt;/p&gt;

&lt;p&gt;Out-File -filepath &amp;ldquo;$backupDir\log&amp;rdquo; -inputobject $((Get-Date -format g) + &amp;ldquo;Removing &amp;rdquo; + $_.FullName + &amp;ldquo; from &amp;rdquo; + $_.CreationTime) -append`&lt;/p&gt;

&lt;p&gt;Remove-Item $_.FullName -recurse}&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;# Handle 7-day backup recyclables next (no directory recursion since each backup is in its own directory)&lt;/p&gt;

&lt;p&gt;# The current backup schedule performs weekly configuration backups with 1-week retention.&lt;/p&gt;

&lt;p&gt;# No &amp;ldquo;overwrite option available, so this script manages removal&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;Get-ChildItem &amp;ldquo;$backupDir\backup_data&amp;rdquo; | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Where-Object {(($_.FullName -match &amp;ldquo;backup_isxpr01_&amp;rdquo;) -and ( $_.CreationTime -lt ((Get-Date).AddDays(-7)) ) )} | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;ForEach-Object {(Remove-Item $_.FullName -recurse)}&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;# Handle daily trend data recyclables next (use recursion parameter).&lt;/p&gt;

&lt;p&gt;# The current daily trend export schedule requires 1-month retention for 24-hr trend data.&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;Get-ChildItem -include *.zip -recurse -path &amp;ldquo;$backupDir\trend_data_export&amp;rdquo; | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Where-Object {(($_.FullName -match &amp;ldquo;24-hr&amp;rdquo;) -and ( $_.CreationTime -lt ((Get-Date).AddMonths(-1)) ) )} | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;ForEach-Object {($_.FullName)}&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;# Handle monthly trend data recyclables next (use recursion parameter).&lt;/p&gt;

&lt;p&gt;# The current monthly trend export schedule requires 5-year retention for 30-day trend data.&lt;/p&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;p&gt;Get-ChildItem -include *.zip -recurse -path &amp;ldquo;$backupDir\trend_data_export&amp;rdquo; | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Where-Object {(($_.FullName -match &amp;ldquo;30-day&amp;rdquo;) -and ( $_.CreationTime -lt ((Get-Date).AddYears(-5)) ) )} | `&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;ForEach-Object {($_.FullName)}&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenFiler errors that only I seemed to experience…</title>
      <link>https://liveaverage.github.io/features/coding/openfiler-errors-that-only-i-seemed-to-experience/</link>
      <pubDate>Tue, 26 Jul 2011 16:51:03 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/openfiler-errors-that-only-i-seemed-to-experience/</guid>
      <description>&lt;p&gt;Well, I&amp;#8217;ve finally deployed some production Openfiler ESA 2.99.1 machines as home-brew iSCSI boxes, primarily used for backups or low-stress virtual storage. Yes, they&amp;#8217;re great &amp;#8212; my basic write speeds on a Core 2 Duo box (recycled Dell Precision 390 workstation with 2GB of RAM and a single 1TB drive *no* RAID):&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;administrator@mail:/backup-iscsi$ sudo dd if=/dev/zero of=garbage bs=131072 count=20000&lt;/p&gt;

&lt;p&gt;20000+0 records in&lt;/p&gt;

&lt;p&gt;20000+0 records out&lt;/p&gt;

&lt;p&gt;2621440000 bytes (2.6 GB) copied, 40.8493 s, 64.2 MB/s&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m pretty happy with that. What I&amp;#8217;m not please with is a 56MB log (/var/log/secure) filled with strange messages:&lt;/p&gt;

&lt;p&gt;[shell]Jul 26 12:25:46 e0-002 sudo: openfiler : TTY=unknown ; PWD=/opt/openfiler/var/www/htdocs ; USER=root ; COMMAND=/usr/bin/uptime&lt;/p&gt;

&lt;p&gt;Jul 26 12:25:46 e0-002 sudo: PAM unable to dlopen(/lib64/security/pam_gnome_keyring.so)&lt;/p&gt;

&lt;p&gt;Jul 26 12:25:46 e0-002 sudo: PAM [error: /lib64/security/pam_gnome_keyring.so: cannot open shared object file: No such file or directory]&lt;/p&gt;

&lt;p&gt;Jul 26 12:25:46 e0-002 sudo: PAM adding faulty module: /lib64/security/pam_gnome_keyring.so[/shell]&lt;/p&gt;

&lt;p&gt;Okay, so the first message isn&amp;#8217;t strange. In fact, it&amp;#8217;s normal. But I couldn&amp;#8217;t figure out why a non-GUI (yes, it has a web interface, but no default window manager) distro was trying to load the Gnome keyring shared object. I still don&amp;#8217;t know why. What I do know is how to get rid of this message:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Verify which PAM files reference this shared object:&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[shell][root@e0-002 pam.d]# cd /etc/pam.d/&lt;/p&gt;

&lt;p&gt;[root@e0-002 pam.d]# grep -i -n &amp;#8216;pam_gnome_keyring.so&amp;#8217; *&lt;/p&gt;

&lt;p&gt;system-auth:5:# FL: Have (patched) pam_gnome_keyring.so grab the password before pam_unix.so&lt;/p&gt;

&lt;p&gt;system-auth:6:auth optional pam_gnome_keyring.so&lt;/p&gt;

&lt;p&gt;system-auth:16:password optional pam_gnome_keyring.so[/shell]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In this instance, the &amp;#8216;system-auth&amp;#8217; file contained these troublesome pam_gnome_keyring.so entries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fire-up your favorite text editor and comment those lines.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reboot &amp;amp; enjoy a log without an absurd amount of irrelevant errors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;a title=&#34;The original thread mentioning the problem.&#34; href=&#34;https://lists.openfiler.com/viewtopic.php?id=6228&#34; target=&#34;_blank&#34;&gt;I found this referenced &lt;em&gt;once&lt;/em&gt; on the OpenFiler forums&lt;/a&gt;, but no answer or explanation. I hope this helps someone else that might experience a similar problem.
&lt;/div&gt;

&lt;div&gt;
  I&amp;#8217;ll also be doing a write-up related to OpenFiler volume backups with LVM snapshots.
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Add ‘Submitted Tickets’ Listing Page for Joomla! RSTickets</title>
      <link>https://liveaverage.github.io/features/coding/add-submitted-tickets-listing-page-for-joomla-rstickets/</link>
      <pubDate>Fri, 10 Jul 2009 17:15:21 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/add-submitted-tickets-listing-page-for-joomla-rstickets/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignright&#34; title=&#34;Joomla!&#34; src=&#34;http://cdn.joomla.org/images/logo.png&#34; alt=&#34;&#34; width=&#34;235&#34; height=&#34;46&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you haven&amp;#8217;t heard, &lt;a title=&#34;Check out the RSTickets! extension from RSJoomla!&#34; href=&#34;http://www.rsjoomla.com/joomla-components/rstickets.html&#34; target=&#34;_blank&#34;&gt;RSTickets!&lt;/a&gt; is an advanced Joomla! Help Desk ticketing system that allows you (or a team of yous) to manage and keep track of your clients&amp;#8217; issues. It&amp;#8217;s actually one of the few effective, useful Help Desk systems available for the Joomla! 1.5+ framework that I would personally recommend. Unfortunately, it&amp;#8217;s still under development and lacks certain features that one may desire, such as a read-only listing page that displays tickets already submitted to you or your department.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I noticed internal network clients were submitting several duplicate tickets related to a shared problem (i.e. printer trouble, network outages, etc.). I couldn&amp;#8217;t blame them since they couldn&amp;#8217;t view previously submitted tickets, so I decided to create a quick + dirty page that pulls &lt;em&gt;&amp;#8220;open,&amp;#8221;&lt;/em&gt; or &lt;em&gt;&amp;#8220;on-hold,&amp;#8221;&lt;/em&gt; tickets from a specific department&amp;#8217;s table of submitted [active] tickets and displays them on a Joomla! article page (using the Sourcerer plug-in to execute custom PHP with {source} tags). Pasting this code into an article without the Sourcerer plug-in [or some sort of plug-in for executing PHP] &lt;em&gt;will do nothing.&lt;/em&gt; Also note the &lt;em&gt;include&lt;/em&gt; file for making a raw connection to your MySQL database. This is required (and should be stored in a directory with the appropriate permissions to prevent outside read access).&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;d like to simply list the number (amount) of tickets (open, closed, on-hold) for &lt;em&gt;all&lt;/em&gt; departments, you might want to &lt;a title=&#34;Try RSJoomla!&#39;s RSTicket Module for a quick count of all tickets.&#34; href=&#34;http://www.rsjoomla.com/customer-support/forum/38-rstickets/7805-joomla-module-for-rstickets.html&#34; target=&#34;_blank&#34;&gt;check the unreleased version of RSJoomla!&amp;#8217;s RSTicket Module.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;p&gt;{source}&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;include (&amp;ldquo;includes/connect_custom.php&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;$result2 = mysql_query(&amp;ldquo;SELECT * FROM jos_rstickets_tickets WHERE DepartmentId=3 AND (TicketStatus=&amp;#8217;open&amp;#8217; OR TicketStatus=&amp;#8217;on-hold&amp;#8217;) ORDER BY TicketTime ASC&amp;rdquo;) or die(mysql_error());&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;br /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;tr&gt;&lt;td style=&#34;padding-bottom: 10px;&#34; colspan=&#34;6&#34;&gt;Please check the open, pending, or on-hold tickets listed below before submitting a support ticket. The list below can be utilized as an informal gauge for IT response times. If a duplicate support ticket is submitted, you may cancel it yourself or it will be deleted by the IT Department upon review. Thank you for your cooperation.&lt;/td&gt;&lt;/tr&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;tr&gt;&lt;td style=&#34;font-size: 16px;font-weight: bold;padding-bottom: 10px;&#34; colspan=&#34;6&#34;&gt;SUBMITTED SUPPORT TICKETS:&lt;/td&gt;&lt;/tr&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;tr&gt;&lt;td style=&#34;text-align:left; padding-bottom:7px;&#34;&gt;&lt;strong&gt;Submitted:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;padding-bottom:7px;&#34;&gt;&lt;strong&gt;Username:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;padding-bottom:7px;&#34;&gt;&lt;strong&gt;Ticket Code:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;padding-bottom:7px;&#34;&gt;&lt;strong&gt;Subject:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;padding-bottom:7px;&#34;&gt;&lt;strong&gt;Status:&lt;/strong&gt;&lt;/td&gt;&lt;td style=&#34;padding-bottom:7px;&#34;&gt;&lt;strong&gt;Priority:&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;while($row = mysql_fetch_array($result2))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;$custid = $row[&amp;#8216;CustomerId&amp;#8217;];&lt;/p&gt;

&lt;p&gt;$userquery= mysql_query(&amp;ldquo;SELECT name FROM jos_users WHERE id=$custid&amp;rdquo;) or die(mysql_error());&lt;/p&gt;

&lt;p&gt;$username = mysql_fetch_array($userquery);&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;tr style=&#34;font-size: 10px;vertical-align:top;&#34;&gt;&lt;td style=&#34;width: 102px; overflow: hidden;padding: 3px -10px 3px 3px;&#34;&gt;&amp;#8217; . date(&amp;ldquo;Y-m-d H:m&amp;rdquo;, $row[&amp;#8216;TicketTime&amp;#8217;]) . &amp;#8216;&lt;/td&gt;&lt;td&gt;&amp;#8217; . $username[&amp;#8216;name&amp;#8217;] . &amp;#8216;&lt;/td&gt;&lt;td&gt;&amp;#8217; . $row[&amp;#8216;TicketCode&amp;#8217;] . &amp;#8216;&lt;/td&gt;&lt;td style=&#34;width: 235px; overflow: hidden;&#34;&gt;&amp;#8217; . $row[&amp;#8216;TicketSubject&amp;#8217;] . &amp;#8216;&lt;/td&gt;&lt;td&gt;&amp;#8217; . strtoupper($row[&amp;#8216;TicketStatus&amp;#8217;]) . &amp;#8216;&lt;/td&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;if ($row[&amp;#8216;TicketPriority&amp;#8217;]==&amp;#8217;high&amp;#8217;){&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;td style=&#34;background-color: red; color: white; font-weight: bold;padding-left: 5px;&#34;&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;} else if ($row[&amp;#8216;TicketPriority&amp;#8217;]==&amp;#8217;normal&amp;#8217;){&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;td style=&#34;background-color: blue; color: white; font-weight: bold;padding-left: 5px;&#34;&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;} else if ($row[&amp;#8216;TicketPriority&amp;#8217;]==&amp;#8217;low&amp;#8217;){&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;td style=&#34;background-color: yellow; font-color: black; font-weight: bold;padding-left: 5px;&#34;&gt;&amp;#8217;;}&lt;/p&gt;

&lt;p&gt;echo strtoupper($row[&amp;#8216;TicketPriority&amp;#8217;]) . &amp;#8216;&lt;/td&gt;&lt;/tr&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;tr&gt;&lt;td style=&#34;font-size:16px; padding-top: 20px; padding-bottom: 20px&#34; colspan=&#34;6&#34;&gt;&lt;strong&gt;&lt;a href=&#34;index.php?option=com\_rstickets&amp;Itemid=59&#34;&gt;&lt;img src=&#34;images/M\_images/onsite\_support1.jpg&#34;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;index.php?option=com\_rstickets&amp;Itemid=59&#34;&gt;SUBMIT A NEW SUPPORT TICKET&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;br /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;{/source}&lt;/p&gt;

&lt;p&gt;[/php]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;connect_custom.php :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;// Script: connect_custom.php&lt;/p&gt;

&lt;p&gt;// Author: JR&lt;/p&gt;

&lt;p&gt;// Date: 20080218&lt;/p&gt;

&lt;p&gt;// Use: Utilized for custom DB connections to our current database for Fabrik Forms + Joomla 1.5&lt;/p&gt;

&lt;p&gt;$hostname=&amp;ldquo;localhost&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;$mysql_login=&amp;ldquo;thedude&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;$mysql_password=&amp;ldquo;sumpasswordhere&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;$database=&amp;ldquo;datablah&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;if (!($db = mysql_pconnect($hostname, $mysql_login , $mysql_password))){&lt;/p&gt;

&lt;p&gt;die(&amp;ldquo;Can&amp;#8217;t connect to database server.&amp;ldquo;);&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;if (!(mysql_select_db(&amp;ldquo;$database&amp;rdquo;,$db))){&lt;/p&gt;

&lt;p&gt;die(&amp;ldquo;Can&amp;#8217;t connect to database.&amp;ldquo;);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/php]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Altermime, Postfix/Zimbra, and Headaches</title>
      <link>https://liveaverage.github.io/features/coding/altermime-postfixzimbra-and-headaches/</link>
      <pubDate>Wed, 24 Jun 2009 19:43:11 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/altermime-postfixzimbra-and-headaches/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;EDIT: I have since removed altermime after installing a MailScanner spam relay for our Zimbra server to use. Because, by default, MailScanner appends a default signature to all outbound email, it was very simple to modify the signature rules to accomodate our mandatory disclaimers for different domains.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had the pleasure of applying mandatory disclaimers to all [outbound] emails at my workplace today&amp;#8230; ~Joy~ &amp;#8230; I had the assumption it&amp;#8217;d be rather easy, but Altermime and Postfix were a bit finicky to work with. After editing the &lt;strong&gt;master.cf&lt;/strong&gt; I ended up customizing my own &amp;#8216;disclaimer&amp;#8217; shell script.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;INSPECT_DIR=/var/spool/filter&lt;/p&gt;

&lt;p&gt;SENDMAIL=/opt/zimbra/postfix/sbin/sendmail&lt;/p&gt;

&lt;p&gt;# Exit codes from&lt;/p&gt;

&lt;p&gt;EX_TEMPFAIL=75&lt;/p&gt;

&lt;p&gt;EX_UNAVAILABLE=69&lt;/p&gt;

&lt;p&gt;# Clean up when done or when aborting.&lt;/p&gt;

&lt;p&gt;trap &amp;ldquo;rm -f in.$$&amp;rdquo; 0 1 2 3 15&lt;/p&gt;

&lt;p&gt;# Start processing.&lt;/p&gt;

&lt;p&gt;cd $INSPECT_DIR || { echo $INSPECT_DIR does not exist; exit $EX_TEMPFAIL; }&lt;/p&gt;

&lt;p&gt;cat &amp;gt; in.$$ || { echo Cannot save mail to file; exit $EX_TEMPFAIL; }&lt;/p&gt;

&lt;p&gt;# Verify this mail is not incoming or internal-only&lt;/p&gt;

&lt;p&gt;# We don&amp;#8217;t need disclaimers for either one of these cases.&lt;/p&gt;

&lt;p&gt;# Debug:&lt;/p&gt;

&lt;p&gt;#echo &amp;ldquo;output: $from_address&amp;rdquo; &amp;gt;&amp;gt; /tmp/tempoutput.txt&lt;/p&gt;

&lt;p&gt;#Grab the from address:&lt;/p&gt;

&lt;p&gt;from_address=`grep -m 1 &amp;ldquo;From:&amp;rdquo; in.$$ | cut -d &amp;ldquo;&amp;lt;&amp;rdquo; -f 2 | cut -d &amp;ldquo;&amp;gt;&amp;rdquo; -f 1`&lt;/p&gt;

&lt;p&gt;#Verify whether your domain is in the from address.&lt;/p&gt;

&lt;p&gt;#If it is, proceed to distinguish WHICH domain is sending outgoing mail and tag it appropriately:&lt;/p&gt;

&lt;p&gt;#If not, then that would be incoming mail, so leave it alone:&lt;/p&gt;

&lt;p&gt;#Additional (else if) conditional checks will be added to determine if the email is inner-office comm:&lt;/p&gt;

&lt;p&gt;# to_address= `grep -m 1 &amp;ldquo;To:&amp;rdquo; in.$$ | cut -d &amp;ldquo;&amp;lt;&amp;rdquo; -f 2 | cut -d &amp;ldquo;&amp;gt;&amp;rdquo; -f 1`&lt;/p&gt;

&lt;p&gt;# if [[ $from_address == *domain* &amp;amp;&amp;amp; to_address == *domain* ]]; then &amp;#8230;.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# This additional condition requires more debugging&amp;#8230;&lt;/p&gt;

&lt;p&gt;if [[ $from_address == *domain* ]]; then&lt;/p&gt;

&lt;p&gt;# Debug:&lt;/p&gt;

&lt;p&gt;#echo&lt;/p&gt;

&lt;p&gt;#echo &amp;ldquo;FROM: $from_address&amp;rdquo; &amp;gt;&amp;gt; /tmp/tempoutput.txt&lt;/p&gt;

&lt;p&gt;#echo &amp;ldquo;THIS GETS ALTERMIMED&amp;rdquo; &amp;gt;&amp;gt; /tmp/tempoutput.txt&lt;/p&gt;

&lt;p&gt;#echo&lt;/p&gt;

&lt;p&gt;#Check to see which domain is sending outgoing email,&lt;/p&gt;

&lt;p&gt;#then tag it with the appropriate disclaimer:&lt;/p&gt;

&lt;p&gt;if [[ $from_address == *subdomain.domain* ]]; then&lt;/p&gt;

&lt;p&gt;# Debug echo &amp;ldquo;THIS GETS APDD&amp;rdquo; &amp;gt;&amp;gt; /tmp/tempoutput.txt&lt;/p&gt;

&lt;p&gt;/usr/bin/altermime &amp;#8211;input=in.$$ &lt;/p&gt;

&lt;p&gt;&amp;#8211;disclaimer=/opt/zimbra/postfix/conf/disclaimers/apd-disclaimer.txt &lt;/p&gt;

&lt;p&gt;&amp;#8211;disclaimer-html=/opt/zimbra/postfix/conf/disclaimers/apd-disclaimer.txt &lt;/p&gt;

&lt;p&gt;&amp;#8211;xheader=&amp;ldquo;X-Public-Record:&amp;rdquo; || { echo Message content rejected; exit $EX_UNAVAILABLE; }&lt;/p&gt;

&lt;p&gt;else&lt;/p&gt;

&lt;p&gt;# Debug echo &amp;ldquo;THIS GETS COAD&amp;rdquo; &amp;gt;&amp;gt; /tmp/tempoutput.txt&lt;/p&gt;

&lt;p&gt;/usr/bin/altermime &amp;#8211;input=in.$$ &lt;/p&gt;

&lt;p&gt;&amp;#8211;disclaimer=/opt/zimbra/postfix/conf/disclaimers/coa-disclaimer.txt &lt;/p&gt;

&lt;p&gt;&amp;#8211;disclaimer-html=/opt/zimbra/postfix/conf/disclaimers/coa-disclaimer.txt &lt;/p&gt;

&lt;p&gt;&amp;#8211;xheader=&amp;ldquo;X-Public-Record:&amp;rdquo; || { echo Message content rejected; exit $EX_UNAVAILABLE; }&lt;/p&gt;

&lt;p&gt;fi&lt;/p&gt;

&lt;p&gt;fi&lt;/p&gt;

&lt;p&gt;# Might need to remove -i switch for truncation problems depending on your MTA version&amp;#8230;&lt;/p&gt;

&lt;p&gt;$SENDMAIL -i &amp;ldquo;$@&amp;rdquo; &amp;lt; in.$$&lt;/p&gt;

&lt;p&gt;exit $?&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bashing MySQL Dumps</title>
      <link>https://liveaverage.github.io/features/coding/bashing-mysql-dumps/</link>
      <pubDate>Tue, 29 Jul 2008 14:45:14 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/bashing-mysql-dumps/</guid>
      <description>&lt;p&gt;A quick set of batch scripts I wrote up (two of the three scripts, anyway) for dumping all of my (specified) MySQL databases into an archive for backup. The log mailing (&lt;strong&gt;emailsql.pl&lt;/strong&gt;)requires Perl and the MIME:Lite module to correctly function. I&amp;#8217;ve also utilized a wrapper script so the log outputs to a separate file [to be mailed]. There&amp;#8217;s also a &amp;#8216;dummy&amp;#8217; log file I use in my crontab file, though this isn&amp;#8217;t really necessary:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #800000;&#34;&gt;&lt;strong&gt;mysqlbackupwrapper.sh&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/bin/bash&lt;/p&gt;

&lt;p&gt;#Wrapper script used to call the primary backup script and output to a specified file&lt;/p&gt;

&lt;p&gt;sh /home/administrator/scripts/mysqlbackups &amp;gt; /home/administrator/scripts/sql.backup.log 2&amp;gt;&amp;amp;1&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #800000;&#34;&gt;&lt;strong&gt;mysqlbackup.sh&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;#Timestamp for your logs:&lt;/p&gt;

&lt;p&gt;date&lt;/p&gt;

&lt;p&gt;#Dump the databases &amp;#8211; Make sure to specify your root or user password following the -p switch:&lt;/p&gt;

&lt;p&gt;mysqldump -uroot -p &amp;#8211;opt intraforum &amp;gt; /home/administrator/scripts/sqldata/intra_apdforum.sql&lt;/p&gt;

&lt;p&gt;mysqldump -uroot -p &amp;#8211;opt joomla_intranet &amp;gt; /home/administrator/scripts/sqldata/intra_intranet.sql&lt;/p&gt;

&lt;p&gt;mysqldump -uroot -p &amp;#8211;opt mysql &amp;gt; /home/administrator/scripts/sqldata/intra_mysql.sql&lt;/p&gt;

&lt;p&gt;tar -zcvf /home/administrator/scripts/sqldata.tgz /home/administrator/scripts/sqldata/*.sql&lt;/p&gt;

&lt;p&gt;echo&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;Backup completed successfully for: &amp;ldquo;&lt;/p&gt;

&lt;p&gt;echo&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;MySQL &amp;#8211; PHPbb3 Forum&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;MySQL &amp;#8211; Joomla 1.0.X Intranet&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;MySQL &amp;#8211; Intranet MySQL Tables&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;Copying to SERVER.yourdomain.local &amp;hellip; .&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo&lt;/p&gt;

&lt;p&gt;#Use SCP to transfer to file so you can verify successful backups &amp;#8212; Make sure to use identity/keys for SCP instead of a password:&lt;/p&gt;

&lt;p&gt;scp -v -i /home/administrator/identity /home/administrator/scripts/sqldata.tgz administrator@this.host:/backup/sqldata_backup.tgz&lt;/p&gt;

&lt;p&gt;perl /home/administrator/scripts/emailsql.pl&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #800000;&#34;&gt;&lt;strong&gt;emailsql.pl (I did not write this one)&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;Instead of just sending the text of the log file, this script attaches the file and sends the message:&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;#!/usr/bin/perl -w&lt;/p&gt;

&lt;p&gt;use MIME::Lite;&lt;/p&gt;

&lt;p&gt;$msg = MIME::Lite-&amp;gt;new(&lt;/p&gt;

&lt;p&gt;From    =&amp;gt; &amp;#8216;Backup Log&amp;#8217;,&lt;/p&gt;

&lt;p&gt;To      =&amp;gt; &amp;#8216;liveaverage@yourdomain.org&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Subject =&amp;gt; &amp;#8216;MySQL Data Backup &amp;#8211; Intranets&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Type    =&amp;gt; &amp;#8216;text/plain&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Data    =&amp;gt; &amp;ldquo;See the attached log for details on the most recent MySQL Database Dumps.&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;$msg-&amp;gt;attach(&lt;/p&gt;

&lt;p&gt;Type       =&amp;gt;&amp;#8217;text/plain&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Path       =&amp;gt;&amp;#8217;/home/administrator/scripts/sql.backup.log&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Filename   =&amp;gt;&amp;#8217;sql.backup.log&amp;#8217;,&lt;/p&gt;

&lt;p&gt;Disposition        =&amp;gt;&amp;#8217;attachment&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$msg-&amp;gt;send;&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Perl my way to happiness</title>
      <link>https://liveaverage.github.io/features/coding/perl-my-way-to-happiness/</link>
      <pubDate>Fri, 25 Apr 2008 19:00:49 +0000</pubDate>
      
      <guid>https://liveaverage.github.io/features/coding/perl-my-way-to-happiness/</guid>
      <description>&lt;p&gt;If only everything was as easy &amp;amp; straight-forward as account provisioning in Zimbra:&lt;/p&gt;

&lt;p&gt;[shell]!/usr/bin/perl&lt;/p&gt;

&lt;p&gt;# ZCS IMPORT SCRIPT&lt;/p&gt;

&lt;p&gt;# Provided by : ZCS Wiki&lt;/p&gt;

&lt;p&gt;# Modified by : J.R.&lt;/p&gt;

&lt;p&gt;# Last Change : 2008.04.09&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;# Lookup the valid COS (Class of Service) ID in the interface or like this&lt;/p&gt;

&lt;p&gt;my $cosid = `su &amp;#8211; zimbra -c &amp;#8216;zmprov gc apd |grep zimbraId:&amp;#8217;`;&lt;/p&gt;

&lt;p&gt;$cosid =~ s/zimbraId:\s*|\s*$//g;&lt;/p&gt;

&lt;p&gt;while (&amp;lt;&amp;gt;) {&lt;/p&gt;

&lt;p&gt;chomp;&lt;/p&gt;

&lt;p&gt;# CHANGE ME: To the actual fields you use in your CSV file&lt;/p&gt;

&lt;p&gt;my ($email, $password, $first, $last) = split(/\,/, $_, 4);&lt;/p&gt;

&lt;p&gt;my ($uid, $domain) = split(/@/, $email, 2);&lt;/p&gt;

&lt;p&gt;print qq{ca $uid\@$domain $password\n};&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain zimbraCOSid &amp;ldquo;$cosid&amp;rdquo;\n};&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain givenName &amp;ldquo;$first&amp;rdquo;\n};&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain sn &amp;ldquo;$last&amp;rdquo;\n};&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain cn &amp;ldquo;$uid&amp;rdquo;\n};&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain displayName &amp;ldquo;$first $last&amp;rdquo;\n};&lt;/p&gt;

&lt;p&gt;#Set the user&amp;#8217;s reply or canonical address&lt;/p&gt;

&lt;p&gt;print qq{ma $uid\@$domain zimbraMailCanonicalAddress $uid\@cityof*****.org\n};&lt;/p&gt;

&lt;p&gt;#Add e-mail account alias for multiple domains&lt;/p&gt;

&lt;p&gt;#Verify domain is correctly working for provisioning aliases&lt;/p&gt;

&lt;p&gt;print qq{aaa $uid\@$domain $uid\@cityof*****.com\n};&lt;/p&gt;

&lt;p&gt;#Add all users to a general distribution list and terminate&lt;/p&gt;

&lt;p&gt;#Add multiple distro-lists if desired&lt;/p&gt;

&lt;p&gt;print qq{adlm dept.all\@cityof&lt;strong&gt;*\**.org $uid\@cityof***&lt;/strong&gt;.org\n};&lt;/p&gt;

&lt;p&gt;print qq{\n};&lt;/p&gt;

&lt;p&gt;}[/shell]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>